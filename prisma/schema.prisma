// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id                 String    @id @default(cuid())
    name               String?
    email              String?   @unique
    emailVerified      DateTime?
    image              String?
    accounts           Account[]
    sessions           Session[]
    comments           Comment[]
    posts              Post[]
    groups             Group[]   @relation("Members")
    ownedGroups        Group[]   @relation("Owner")
    moderatorsAtGroups Group[]   @relation("Moderators")
    createdAt          DateTime
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Group {
    id          String   @id @default(cuid())
    name        String   @unique
    description String?
    owner       User     @relation("Owner", fields: [userId], references: [id])
    userId      String
    moderators  User[]   @relation("Moderators")
    members     User[]   @relation("Members")
    rules       String?
    tags        String?
    posts       Post[]
    postsCounts Int?
    createdAt   DateTime
}

model Post {
    id            String    @id @default(cuid())
    title         String
    body          String?
    images        String[]
    likes         Int?
    comments      Comment[]
    commentsCount Int?
    createdAt     DateTime
    user          User?     @relation(fields: [userId], references: [id])
    userId        String?
    group         Group?    @relation(fields: [groupId], references: [id])
    groupId       String?
}

model Comment {
    id        String   @id @default(cuid())
    user      User     @relation(fields: [userId], references: [id])
    userId    String
    likes     Int?
    createdAt DateTime
    post      Post?    @relation(fields: [postId], references: [id])
    postId    String?
}
